#!/bin/bash


# define variables containing escape sequences for ANSI color codes
# Documentation: https://gkarthiks.github.io/quick-commands-cheat-sheet/bash_command.html
Black=''
DarkGray=''
LightGray=''
Red=''
LightRed=''
Green=''
LightGreen=''
Brown=''
Yellow=''
Blue=''
LightBlue=''
Purple=''
LightPurple=''
Cyan=''
LightCyan=''
White=''
NoColor=''

# checks if file descriptor 1 (stdout) is associated with a terminal
if [[ -t 1 ]]; then
    Black='\033[0;30m'
    DarkGray='\033[1;30m'
    LightGray='\033[0;37m'
    Red='\033[0;31m'
    LightRed='\033[1;31m'
    Green='\033[0;32m'
    LightGreen='\033[1;32m'
    Brown='\033[0;33m'
    Yellow='\033[1;33m'
    Blue='\033[0;34m'
    LightBlue='\033[1;34m'
    Purple='\033[0;35m'
    LightPurple='\033[1;35m'
    Cyan='\033[0;36m'
    LightCyan='\033[1;36m'
    White='\033[1;37m'
    NoColor='\033[0m'
fi

# sets the installation path for the ezcommits script.
INSTALL="$HOME/.ezcommits/bin/ezcommits"

# defines the current version of the ezcommits script.
CURRENT_VERSION="v1.0.0"

# defines the latest version of the ezcommits script.
LATEST_VERSION="v1.0.0"

# the script checks if an update is available and performs the update if necessary
if [[ $1 == "--update" || $1 == "-u" ]]; then
    # checks if the current version matches the latest version.
    if [[ $CURRENT_VERSION == $LATEST_VERSION ]]; then
        # informs the user that the latest version is already installed.
        echo -e "${Green}Latest version is already installed :)"
    else
        echo -e "${Cyan}Update found! Version: ${LATEST_VERSION}"
        echo -e "${Green}Updating [${CURRENT_VERSION}âžœ${LATEST_VERSION}]"

        # checks if the ezcommits script is installed in the system-wide location /usr/bin/ezcommits. 
        if [[ $(which ezcommits) == "/usr/bin/ezcommits" ]]; then
            # if it is, the script prompts the user to run the update command with sudo.
            echo -e "${Red}You must run this as sudo!"
            # downloads the latest version of the ezcommits script from GitHub and installs it in the specified installation path
            curl -s https://raw.githubusercontent.com/iconized/ezcommits/master/ezcommits > "/usr/bin/ezcommits" && echo -e "${Green}Updated :)${NoColor}"
        else
            curl -s https://raw.githubusercontent.com/iconized/ezcommits/master/ezcommits > $INSTALL && echo -e "${Green}Updated :)${NoColor}"
        fi
    fi
    # exits the script with a success status code
    exit 0
fi

# checks if the first command-line argument is either --version or -v
if [[ $1 == "--version" || $1 == "-v" ]]; then
    # if it is, the script prints the current version of ezcommits.
    echo -e "${White}ezcommits${NoColor} $CURRENT_VERSION"
    exit 0
fi

# checks if the first command-line argument is either --help or -h
if [[ $1 == "--help" || $1 == "-h" ]]; then
    echo -e "${White}commit${NoColor} $CURRENT_VERSION"
    echo -e "${White}Usage:${NoColor} commit [options]"
    echo -e "${White}Options:${NoColor}"
    echo -e "  -h, --help\t\t\tShow help message"
    echo -e "  -v, --version\t\t\tShow version"
    echo -e "  -u, --update\t\t\tUpdate ezcommits"
    exit 0
fi

# checks if the current version does not match the latest version.
if [[ $CURRENT_VERSION != $LATEST_VERSION ]]; then
    # if they are different, it informs the user that an update is available.
    echo "Update Found! ($LATEST_VERSION)"
    # informs the user how to update to the latest version if one is available.
    echo -e "${White}ezcommits --update${NoColor} to install the latest version!"
fi

# this variable will ask user whether the commit will be signed off or not.
SIGNED_OFF=""

# Documentation : https://github.com/charmbracelet/gum
# prompts the user with a confirmation message "Stage changes?" using the gum command from the gum package
# if the user confirms (presses Enter), it executes the commands after &&
gum confirm "Stage changes?" --selected.background="80" && git add . && echo -e "Changes StagedðŸ¥³"
# if the user confirms, it sets the SIGNED_OFF variable to "-s", indicating that the commit will be signed off.
gum confirm "Add Signed Off by in the commit message body?" --selected.background="80" && SIGNED_OFF="-s"

# Copy: https://github.com/charmbracelet/gum?tab=readme-ov-file#tutorial
# prompts the user to choose a commit type from the given options using the gum choose command
EZCOMMITS_TYPE=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert" --cursor.foreground "#00FFFF")

# prompts the user to input a scope using the gum input command,
SCOPE=$(gum input --cursor.foreground "#00FFFF" --placeholder "scope")

# checks if the SCOPE variable is not empty.
# if it's not empty, it adds parentheses around the value and assigns it back to the SCOPE variable.
test -n "$SCOPE" && SCOPE="($SCOPE)"

# to input a summary for the change
SUMMARY=$(gum input --cursor.foreground "#00FFFF" --value "$EZCOMMITS_TYPE$SCOPE: " --placeholder "Summary of this change")

# to write a description for the change
DESCRIPTION=$(gum write --cursor.foreground "#00FFFF" --placeholder "Details of this change (CTRL+D to finish)")

# it confirms the changes
gum confirm "Commit changes?" --selected.background="80" && git commit $SIGNED_OFF -m "$SUMMARY" -m "$DESCRIPTION" && echo -e "${Green}Successfully Commit Changes :)${NoColor}"

